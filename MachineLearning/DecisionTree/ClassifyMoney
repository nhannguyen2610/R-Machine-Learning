# Collect and explore data 
data('banknote', package = 'mclust')
attach(banknote)
head(banknote); tail(banknote) # check data and its names

# check on the distribution of the class variable:
table(Status)
# Data set has 100 counterfeit and 100 genuine banknotes.

# Select 150 at random without replacement for the training set
set.seed(2018)  #random number for argument to create 'random' route
N = nrow(banknote)  #set numbers of rows = banknote's rows
train = sample(x=1:N, size=150, replace=FALSE)
# Values of train objects: 
# [1]  68  93  12  39 199  59 (result of running head(train))
# first randomly selected example is from
# row 68 of banknote.

# Using C5 algorithm to build decision tree. In R, require C50 package
# package C50 contains the decision tree fitting function C5.0.
library(C50)

# formula tells R to build a model with Status as the class variable.
fitc = C5.0(Status ~ ., 
            data = banknote[train,])
# The argument “~.” instructs R to use all of the features in banknote.

# plot to see decision tree 
plot(fitc)

# view decision rules of how it separates data in such a way. 
fitc.rules = C5.0(Status ~ ., 
                  data = banknote[train,], 
                  rules = TRUE)
summary(fitc.rules)

# Evaluate model performance on training dataset by 
# using a combination of the predict and table functions.
predict.train = predict(fitc, newdata = banknote[train,],
                        type = 'class')
head(predict.train)

# compare model results with actual results
table(Status[train], predict.train, dnn=c('Observed class', 'Predicted Class'))

################# test on validation data set #################
predict.val = predict(fitc, newdata = banknote[-train,], 
                      type='class')

# compare model results with actual results
table(Status[-train], predict.val, dnn=c('Observed class', 'Predicted Class'))


#### improving performance by using 'tree' library ####
library(tree)
fit = tree(Status ~ ., 
           data = banknote[train,], 
           split = 'deviance')
# viewing the decision tree
plot(fit); text(fit)
summary(fit)

# running model on train dataset
predict.treetrain = predict(fit, newdata = banknote[train,])
head(predict.treetrain)

predict.class = colnames(predict.treetrain)[max.col(predict.treetrain,
                                                    ties.method = 'random')]
head(predict.class)
table(Status[train], predict.class, dnn=c('Observed class', 'Predicted Class'))

# running model on validation dataset
predict.treeval = predict(fit, newdata = banknote[-train,])
predict.treeclass = colnames(predict.treeval)[max.col(predict.treeval,
                                                      ties.method = 'random')]
table(Status[-train], predict.treeclass, dnn=c('Observed class', 'Predicted Class'))
